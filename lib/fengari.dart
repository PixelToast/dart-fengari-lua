/// Basic fengari bindings, see
/// https://github.com/fengari-lua/fengari/ for documentation
@JS("fengari")
library fengari;
import 'dart:js';

import 'package:js/js.dart';

dynamic toUint8Array(List<int> data) =>
  (context["Uint8Array"] as dynamic).callMethod("from", [JsObject.jsify(data)]);

@JS() class lua_Debug {}
@JS() class lua_State {}
@JS() class lua_KContext {}
@JS() class luaL_Reg {}

typedef lua_CFunction = int Function(lua_State L);

@JS("lua.lua_absindex")          external dynamic    lua_absindex(lua_State L, int index);
@JS("lua.lua_arith")             external void       lua_arith(lua_State L, int op);
@JS("lua.lua_atnativeerror")     external void       lua_atnativeerror(lua_State L, dynamic func);
@JS("lua.lua_atpanic")           external dynamic    lua_atpanic(lua_State L, dynamic panicf);
@JS("lua.lua_call")              external void       lua_call(lua_State L, int nargs, int nresults);
@JS("lua.lua_callk")             external void       lua_callk(lua_State L, int nargs, int nresults, lua_KContext ctx, dynamic k);
@JS("lua.lua_checkstack")        external int        lua_checkstack(lua_State L, int n);
@JS("lua.lua_close")             external void       lua_close(lua_State L);
@JS("lua.lua_compare")           external int        lua_compare(lua_State L, int index1, int index2, int op);
@JS("lua.lua_concat")            external void       lua_concat(lua_State L, int n);
@JS("lua.lua_copy")              external void       lua_copy(lua_State L, int fromidx, int toidx);
@JS("lua.lua_createtable")       external void       lua_createtable(lua_State L, int narr, int nrec);
@JS("lua.lua_dump")              external int        lua_dump(lua_State L, dynamic writer, r,n);
@JS("lua.lua_error")             external int        lua_error(lua_State L);
@JS("lua.lua_gc")                external int        lua_gc(lua_State L, int what, int data);
@JS("lua.lua_getfield")          external int        lua_getfield(lua_State L, int index, dynamic k);
@JS("lua.lua_getglobal")         external int        lua_getglobal(lua_State L, int index, int i);
@JS("lua.lua_gethook")           external dynamic    lua_gethook(lua_State L);
@JS("lua.lua_gethookcount")      external int        lua_gethookcount(lua_State L);
@JS("lua.lua_gethookmask")       external int        lua_gethookmask(lua_State L);
@JS("lua.lua_geti")              external int        lua_geti(lua_State L, int inex, int i);
@JS("lua.lua_getinfo")           external int        lua_getinfo(lua_State L, dynamic what, lua_Debug ar);
@JS("lua.lua_getlocal")          external dynamic    lua_getlocal(lua_State L, lua_Debug ar, int n);
@JS("lua.lua_getmetatable")      external int        lua_getmetatable(lua_State L, int index);
@JS("lua.lua_getstack")          external int        lua_getstack(lua_State L, int level, lua_Debug ar);
@JS("lua.lua_gettable")          external int        lua_gettable(lua_State L, int index);
@JS("lua.lua_gettop")            external int        lua_gettop(lua_State L);
@JS("lua.lua_getupvalue")        external dynamic    lua_getupvalue(lua_State L, int funcindex, int n);
@JS("lua.lua_getuservalue")      external int        lua_getuservalue(lua_State L, int index);
@JS("lua.lua_insert")            external void       lua_insert(lua_State L, int index);
@JS("lua.lua_isboolean")         external bool       lua_isboolean(lua_State L, int index);
@JS("lua.lua_iscfunction")       external bool       lua_iscfunction(lua_State L, int index);
@JS("lua.lua_isfunction")        external bool       lua_isfunction(lua_State L, int index);
@JS("lua.lua_isinteger")         external bool       lua_isinteger(lua_State L, int index);
@JS("lua.lua_islightuserdata")   external bool       lua_islightuserdata(lua_State L, int index);
@JS("lua.lua_isnil")             external bool       lua_isnil(lua_State L, int index);
@JS("lua.lua_isnone")            external bool       lua_isnone(lua_State L, int index);
@JS("lua.lua_isnoneornil")       external bool       lua_isnoneornil(lua_State L, int index);
@JS("lua.lua_isnumber")          external bool       lua_isnumber(lua_State L, int index);
@JS("lua.lua_isproxy")           external bool       lua_isproxy(lua_State L, int index);
@JS("lua.lua_isstring")          external bool       lua_isstring(lua_State L, int index);
@JS("lua.lua_istable")           external bool       lua_istable(lua_State L, int index);
@JS("lua.lua_isthread")          external bool       lua_isthread(lua_State L, int index);
@JS("lua.lua_isuserdata")        external bool       lua_isuserdata(lua_State L, int index);
@JS("lua.lua_isyieldable")       external bool       lua_isyieldable(lua_State L);
@JS("lua.lua_len")               external void       lua_len(lua_State L, int index);
@JS("lua.lua_load")              external int        lua_load(lua_State L, dynamic reader, dynamic data, dynamic chunkname, dynamic mode);
@JS("lua.lua_newstate")          external lua_State  lua_newstate(dynamic f, dynamic ud);
@JS("lua.lua_newtable")          external void       lua_newtable(lua_State L);
@JS("lua.lua_newthread")         external lua_State  lua_newthread(lua_State L);
@JS("lua.lua_newuserdata")       external dynamic    lua_newuserdata(lua_State L, int size);
@JS("lua.lua_next")              external int        lua_next(lua_State L, int index);
@JS("lua.lua_pcall")             external int        lua_pcall(lua_State L, int nargs, int nresults, int msgh);
@JS("lua.lua_pcallk")            external int        lua_pcallk(lua_State L, int nargs, int nresults, int msgh, lua_KContext ctx, dynamic k);
@JS("lua.lua_pop")               external void       lua_pop(lua_State L, int n);
@JS("lua.lua_pushboolean")       external void       lua_pushboolean(lua_State L, int b);
@JS("lua.lua_pushcclosure")      external void       lua_pushcclosure(lua_State L, dynamic fn, int n);
@JS("lua.lua_pushcfunction")     external void       lua_pushcfunction(lua_State L, dynamic f);
@JS("lua.lua_pushglobaltable")   external void       lua_pushglobaltable(lua_State L);
@JS("lua.lua_pushinteger")       external void       lua_pushinteger(lua_State L, int n);
@JS("lua.lua_pushlightuserdata") external void       lua_pushlightuserdata(lua_State L, dynamic p);
@JS("lua.lua_pushliteral")       external dynamic    lua_pushliteral(lua_State L, dynamic s);
@JS("lua.lua_pushlstring")       external dynamic    lua_pushlstring(lua_State L, dynamic s, int len);
@JS("lua.lua_pushnil")           external void       lua_pushnil(lua_State L);
@JS("lua.lua_pushnumber")        external void       lua_pushnumber(lua_State L, double n);
@JS("lua.lua_pushstring")        external dynamic    lua_pushstring(lua_State L, dynamic s);
@JS("lua.lua_pushthread")        external int        lua_pushthread(lua_State L);
@JS("lua.lua_pushvalue")         external void       lua_pushvalue(lua_State L, int index);
@JS("lua.lua_pushvfstring")      external dynamic    lua_pushvfstring(lua_State L, dynamic fmt, JsArray<dynamic> argp);
@JS("lua.lua_rawequal")          external int        lua_rawequal(lua_State L, int index1, int index2);
@JS("lua.lua_rawget")            external int        lua_rawget(lua_State L, int index);
@JS("lua.lua_rawgeti")           external int        lua_rawgeti(lua_State L, int index, int n);
@JS("lua.lua_rawgetp")           external int        lua_rawgetp(lua_State L, int index, dynamic p);
@JS("lua.lua_rawlen")            external int        lua_rawlen(lua_State L, int index);
@JS("lua.lua_rawset")            external void       lua_rawset(lua_State L, int index);
@JS("lua.lua_rawseti")           external void       lua_rawseti(lua_State L, int index, int i);
@JS("lua.lua_rawsetp")           external void       lua_rawsetp(lua_State L, int index, dynamic p);
@JS("lua.lua_register")          external void       lua_register(lua_State L, dynamic name, dynamic f);
@JS("lua.lua_remove")            external void       lua_remove(lua_State L, int index);
@JS("lua.lua_replace")           external void       lua_replace(lua_State L, int index);
@JS("lua.lua_resume")            external int        lua_resume(lua_State L, lua_State from, int nargs);
@JS("lua.lua_rotate")            external void       lua_rotate(lua_State L, int idx, int n);
@JS("lua.lua_setfield")          external void       lua_setfield(lua_State L, int index, dynamic k);
@JS("lua.lua_setglobal")         external void       lua_setglobal(lua_State L, dynamic name);
@JS("lua.lua_sethook")           external void       lua_sethook(lua_State L, dynamic f, int mask, int count);
@JS("lua.lua_seti")              external void       lua_seti(lua_State L, int index, int n);
@JS("lua.lua_setlocal")          external dynamic    lua_setlocal(lua_State L, lua_Debug ar, int n);
@JS("lua.lua_setmetatable")      external void       lua_setmetatable(lua_State L, dynamic tname);
@JS("lua.lua_settable")          external void       lua_settable(lua_State L, int index);
@JS("lua.lua_settop")            external void       lua_settop(lua_State L, int index);
@JS("lua.lua_setupvalue")        external dynamic    lua_setupvalue(lua_State L, int funcindex, int n);
@JS("lua.lua_setuservalue")      external void       lua_setuservalue(lua_State L, int index);
@JS("lua.lua_status")            external int        lua_status(lua_State L);
@JS("lua.lua_stringtonumber")    external int        lua_stringtonumber(lua_State L, dynamic s);
@JS("lua.lua_toboolean")         external int        lua_toboolean(lua_State L, int index);
@JS("lua.lua_tocfunction")       external dynamic    lua_tocfunction(lua_State L, int index);
@JS("lua.lua_todataview")        external dynamic    lua_todataview(lua_State L, int index);
@JS("lua.lua_tointeger")         external int        lua_tointeger(lua_State L, int index);
@JS("lua.lua_tointegerx")        external int        lua_tointegerx(lua_State L, int index);
@JS("lua.lua_tojsstring")        external String     lua_tojsstring(lua_State L, int index);
@JS("lua.lua_tolstring")         external dynamic    lua_tolstring(lua_State L, int index);
@JS("lua.lua_tonumber")          external double     lua_tonumber(lua_State L, int index);
@JS("lua.lua_tonumberx")         external double     lua_tonumberx(lua_State L, int index);
@JS("lua.lua_topointer")         external dynamic    lua_topointer(lua_State L, int index);
@JS("lua.lua_toproxy")           external dynamic    lua_toproxy(lua_State L, int index);
@JS("lua.lua_tostring")          external dynamic    lua_tostring(lua_State L, int index);
@JS("lua.lua_tothread")          external lua_State  lua_tothread(lua_State L, int index);
@JS("lua.lua_touserdata")        external dynamic    lua_touserdata(lua_State L, int index);
@JS("lua.lua_type")              external int        lua_type(lua_State L, int index);
@JS("lua.lua_typename")          external dynamic    lua_typename(lua_State L, int tp);
@JS("lua.lua_upvalueid")         external int        lua_upvalueid(lua_State L, int funcindex, int n);
@JS("lua.lua_upvalueindex")      external int        lua_upvalueindex(int i);
@JS("lua.lua_upvaluejoin")       external void       lua_upvaluejoin(lua_State L, int funcindex1, int n1, int funcindex2, int n2);
@JS("lua.lua_version")           external int        lua_version(lua_State L);
@JS("lua.lua_xmove")             external void       lua_xmove(lua_State from, lua_State to, int n);
@JS("lua.lua_yield")             external int        lua_yield(lua_State L, int nresults);
@JS("lua.lua_yieldk")            external int        lua_yieldk(lua_State L, int nresults, lua_KContext ctx, dynamic k);

@JS("lauxlib.luaL_argcheck")      external void      luaL_argcheck(lua_State L, int cond, int arg, dynamic extramsg);
@JS("lauxlib.luaL_argerror")      external int       luaL_argerror(lua_State L, int arg, dynamic extramsg);
@JS("lauxlib.luaL_callmeta")      external int       luaL_callmeta(lua_State L, int obj, dynamic e);
@JS("lauxlib.luaL_checkany")      external void      luaL_checkany(lua_State L, int arg);
@JS("lauxlib.luaL_checkinteger")  external int       luaL_checkinteger(lua_State L, int arg);
@JS("lauxlib.luaL_checklstring")  external dynamic   luaL_checklstring(lua_State L, int arg);
@JS("lauxlib.luaL_checknumber")   external double    luaL_checknumber(lua_State L, int arg);
@JS("lauxlib.luaL_checkoption")   external int       luaL_checkoption(lua_State L, int arg, dynamic def, JsArray<dynamic> lst);
@JS("lauxlib.luaL_checkstack")    external void      luaL_checkstack(lua_State L, int sz, dynamic msg);
@JS("lauxlib.luaL_checkstring")   external dynamic   luaL_checkstring(lua_State L, int arg);
@JS("lauxlib.luaL_checktype")     external void      luaL_checktype(lua_State L, int arg, int t);
@JS("lauxlib.luaL_checkudata")    external void      luaL_checkudata(lua_State L, int arg, dynamic tname);
@JS("lauxlib.luaL_checkversion")  external void      luaL_checkversion(lua_State L);
@JS("lauxlib.luaL_checkversion_") external void      luaL_checkversion_(lua_State L, int ver, int sz);
@JS("lauxlib.luaL_dofile")        external int       luaL_dofile(lua_State L, dynamic filename);
@JS("lauxlib.luaL_dostring")      external int       luaL_dostring(lua_State L, dynamic str);
@JS("lauxlib.luaL_error")         external int       luaL_error(lua_State L, );
@JS("lauxlib.luaL_execresult")    external int       luaL_execresult(lua_State L, int stat);
@JS("lauxlib.luaL_fileresult")    external int       luaL_fileresult(lua_State L, int stat, dynamic fname, [dynamic e]);
@JS("lauxlib.luaL_getmetafield")  external int       luaL_getmetafield(lua_State L, int obj, dynamic e);
@JS("lauxlib.luaL_getmetatable")  external int       luaL_getmetatable(lua_State L, dynamic tname);
@JS("lauxlib.luaL_getsubtable")   external int       luaL_getsubtable(lua_State L, int idx, dynamic fname);
@JS("lauxlib.luaL_gsub")          external dynamic   luaL_gsub(lua_State L, dynamic s, dynamic p, dynamic r);
@JS("lauxlib.luaL_len")           external int       luaL_len(lua_State L, int index);
@JS("lauxlib.luaL_loadbuffer")    external int       luaL_loadbuffer(lua_State L, dynamic buff, int sz, dynamic name);
@JS("lauxlib.luaL_loadbufferx")   external int       luaL_loadbufferx(lua_State L, dynamic buff, int sz, dynamic name, dynamic mode);
@JS("lauxlib.luaL_loadfile")      external int       luaL_loadfile(lua_State L, dynamic filename);
@JS("lauxlib.luaL_loadfilex")     external int       luaL_loadfilex(lua_State L, dynamic filename, dynamic mode);
@JS("lauxlib.luaL_loadstring")    external int       luaL_loadstring(lua_State L, dynamic s);
@JS("lauxlib.luaL_newlib")        external void      luaL_newlib(lua_State L, JsArray<luaL_Reg> l);
@JS("lauxlib.luaL_newlibtable")   external void      luaL_newlibtable(lua_State L);
@JS("lauxlib.luaL_newmetatable")  external int       luaL_newmetatable(lua_State L, dynamic tname);
@JS("lauxlib.luaL_newstate")      external lua_State luaL_newstate();
@JS("lauxlib.luaL_opt")           external dynamic   luaL_opt(lua_State L, dynamic func, dynamic arg, dynamic dflt);
@JS("lauxlib.luaL_optinteger")    external int       luaL_optinteger(lua_State L, int arg, int d);
@JS("lauxlib.luaL_optlstring")    external dynamic   luaL_optlstring(lua_State L, int arg, dynamic d);
@JS("lauxlib.luaL_optnumber")     external double    luaL_optnumber(lua_State L, int arg, double d);
@JS("lauxlib.luaL_optstring")     external dynamic   luaL_optstring(lua_State L, int arg, dynamic d);
@JS("lauxlib.luaL_ref")           external int       luaL_ref(lua_State L, int t);
@JS("lauxlib.luaL_requiref")      external void      luaL_requiref(lua_State L, dynamic modname, openf, int glb);
@JS("lauxlib.luaL_setfuncs")      external void      luaL_setfuncs(lua_State L, luaL_Reg l, int nup);
@JS("lauxlib.luaL_setmetatable")  external void      luaL_setmetatable(lua_State L, dynamic tname);
@JS("lauxlib.luaL_testudata")     external dynamic   luaL_testudata(lua_State L, int arg, dynamic tname);
@JS("lauxlib.luaL_tolstring")     external dynamic   luaL_tolstring(lua_State L, int idx);
@JS("lauxlib.luaL_traceback")     external void      luaL_traceback(lua_State L, lua_State L1, dynamic msg, int level);
@JS("lauxlib.luaL_typename")      external void      luaL_typename(lua_State L, int index);
@JS("lauxlib.luaL_unref")         external void      luaL_unref(lua_State L, int t, int ref);
@JS("lauxlib.luaL_where")         external void      luaL_where(lua_State L, int lvl);

@JS("lualib.luaL_openlibs")     external void luaL_openlibs(lua_State L);
@JS("lualib.luaopen_base")      external int  luaopen_base(lua_State L);
@JS("lualib.luaopen_coroutine") external int  luaopen_coroutine(lua_State L);
@JS("lualib.luaopen_debug")     external int  luaopen_debug(lua_State L);
@JS("lualib.luaopen_fengari")   external int  luaopen_fengari(lua_State L);
@JS("lualib.luaopen_math")      external int  luaopen_math(lua_State L);
@JS("lualib.luaopen_os")        external int  luaopen_os(lua_State L);
@JS("lualib.luaopen_package")   external int  luaopen_package(lua_State L);
@JS("lualib.luaopen_string")    external int  luaopen_string(lua_State L);
@JS("lualib.luaopen_table")     external int  luaopen_table(lua_State L);
@JS("lualib.luaopen_utf8")      external int  luaopen_utf8(lua_State L);

@JS("interop.push")       external void    interop_push(lua_State L, dynamic value);
@JS("interop.pushjs")     external void    interop_pushjs(lua_State L, dynamic value);
@JS("interop.checkjs")    external dynamic interop_checkjs(lua_State L, int index);
@JS("interop.testjs")     external dynamic interop_testjs(lua_State L, int index);
@JS("interop.tojs")       external dynamic interop_tojs(lua_State L, int index);
@JS("interop.luaopen_js") external int     luaopen_js(lua_State L);

@JS("luastring_eq")      external bool    luastring_eq(dynamic a, dynamic b);
@JS("luastring_indexOf") external int     luastring_indexOf(dynamic src, dynamic str, [int from = 0]);
@JS("luastring_of")      external dynamic luastring_of(String str);
@JS("to_jsstring")       external String  to_jsstring(dynamic src);
@JS("to_luastring")      external dynamic to_luastring(String str);
@JS("to_uristring")      external String  to_uristring(dynamic src);